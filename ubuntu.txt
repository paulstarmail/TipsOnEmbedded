netcat chat through terminal
============================
//This communication is not encrypted. So use  with caution.
nc -lp <port>  //In the server.
nc <server's IP> <server's port>  //In the client. <server's IP> is 127.0.0.1 while communicating between users in te same physical machine.

rsync
=====
rsync -avr --info=progress2 <path to source> <path to destination>

Resume playback when opened in mpv
==================================
vim ~/.config/mpv/mpv.conf

//Put the below code in it.

save-position-on-quit

dpkg
====
sudo dpkg --install <.deb file>  //Install the .deb file.
dpkg --list  //List all .deb pacakges which are installed on the system.
sudo dpkg --remove <package name>

Adding new user
===============
sudo adduser <user name>  //Automatically creates home directory for the user.

Deleting/Removing a user
========================
userdel -f <user name>  //Deletes/Removes user.

Granding sudo permissions
=========================
sudo adduser <user name> sudo
//Re-login or reboot.

apt usage
=============
sudo apt update
sudo apt upgrade
sudo apt-cache search <package name>
sudo apt install <package name>
sudo apt install <path to .deb package>
sudo apt remove --purge <package name>

sudo apt autoremove

Installing fonts
================
sudo cp -ir <source font directory> /usr/share/fonts/<custom destination font directory name>
sudo fc-cache -fv

Useful software
===============
sudo apt install synaptic git meld minicom curl vim gparted ttf-mscorefonts-installer openssh-server printer-driver-gutenprint

p7zip PeaZip

Installing yt-dlp
=================
sudo add-apt-repository ppa:tomtomtom/yt-dlp
sudo apt update
sudo apt install yt-dlp

To fix broken dependencies
==========================
su -l root
sudo apt update && sudo apt --fix-broken install

Update font cahce
=================
sudo fc-cache -f -v

trash-cli
=========
trash <file name>  //To send a specific file or directory to the trash.
trash-list  //To list the files in the trash.
trash-empty  //To empty your trash.
trash-restore  //To restore files from the trash.
trash-rm <file name>  //To permanently delete files from the trash.

Make ubuntu use local time for hardware clock
=============================================
timedatectl set-local-rtc 1

timedatectl  //To check the effect.

Enable boot messages
====================
sudo vim /etc/default/grub
Go to "GRUB_CMDLINE_LINUX_DEFAULT" and remove "quiet" and "splash"
sudo update-grub

Enable minimize and preview on click on ubuntu Dock
===================================================
gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize-or-previews'

gsettings reset org.gnome.shell.extensions.dash-to-dock click-action  //To set to default.

Shortcut
========
ln -s <source directory/file> <destination directory/file>

Add to $PATH
============
vim ~/.bashrc
export PATH="<path to the directory>:$PATH"

source ~/.bashrc
OR
Restart the terminal
OR
Re-login

Fix for long shutdown
=====================
sudo vim /etc/systemd/system.conf
Change "DefaultTimeoutStopSec" to lesser value.

Masking TPM service
===================
sudo systemctl mask dev-tpmrm0.device

List all directories of a binary or a command added to $PATH
============================================================
which -a <name of the binary or command>

List all the related files of a binary or a command added to $PATH
==================================================================
whereis <name of the binary or command>

Create root password
====================
sudo passwd root

Open Nautilus in admin mode
===========================
sudo nautilus

Custom bootloader wallpaper
===========================
sudo nautilus /boot/grub  //Paste the .png wallpaper here.
sudo update-grub

Start menu shortcut
===================
cd /usr/share/applications
sudo vim <application name>.desktop

[Desktop Entry]
Name=<application name>
Exec=<full path to the executable> %f
Terminal=false
Type=Application
Icon=<place the png file in /usr/share/pixmaps and specify its name here without the path>

xdg-desktop-menu forceupdate  //Run this to refresh the .desktop files.

//"%f" is a single file name (including the path), even if multiple files are selected. The system reading the desktop entry should recognize that the program in question cannot handle multiple file arguments, and it should probably spawn and execute multiple copies of a program for each selected file if the program is not able to handle additional file arguments. If files are not on the local file system (i.e. are on HTTP or FTP locations), the files will be copied to the local file system and %f will be expanded to point at the temporary file. Used for programs that do not understand the URL syntax.

Access shared folder of VirtualBox
==================================
sudo usermod -aG vboxsf <user name>

Run script on login or startup
==============================
~/.bashrc  //Runs command/script when ever user logs-in, in GUI or, in terminal every time even after startup.
--------------------------------------------------------------------------------------------------------------
~/.config/autostart/<file name>.desktop  //Runs command/script when user logs-in, in GUI.

----Example entry in "~/.config/autostart/<file name>.desktop" (login-sound.desktop)----

[Desktop Entry]
Name=startuprc
Comment=Runs commands at startup
Exec=/bin/bash <path>/login-script.sh
Terminal=false
Type=Application
X-GNOME-Autostart-enabled=true

----Example of script file (login-script.sh)----

#!/bin/bash
vlc -I dummy --play-and-exit "/usr/share/sounds/Yaru/stereo/complete.oga"

sudo chmod a+x login-script.sh
-----------------------------------------------------------------------------------------------------------
sudo vim /etc/systemd/system/<service name>.service  //Runs script at boot (before login).

[Unit]
Description=<a description>

[Service]
ExecStart=<absolute path to the script>
Restart=always
WorkingDirectory=<absolute path to the directory containing the script>

[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload  //Run this command everytime the service/unit file is changed.
sudo systemctl start <service name>.service
sudo systemctl enable <service name>.service

sudo systemctl stop <service name>.service
-----------------------------------------------------------------------------------------------------------

Run script on logout or shutdown
================================
~/.bash_logout  //Runs command/script when ever user logs-out, in GUI or, in terminal every time even after startup.

Default text editor
===================
vim ~/.selected_editor

SELECTED_EDITOR="/usr/bin/vim"

cron
====
crontab -l  //list cron jobs for the user.
crontab -e  //Add a new cron job for the logged in user.

Conditional Execution in Shell
==============================
command_1 && command_2  //Execute command_2 only when command_1 is executed successfully.
command_1 || command_2  //Execute command_2 only when command_1 is not successful executed.
command_1 ; command_2  //Execute command_1 and command_2 even if they are successful or not.

Configure SFTP Server
=====================
sudo adduser hawk_sftp
sudo mkdir -p /var/sftp/files
sudo chown root:root /var/sftp
sudo chmod 755 /var/sftp
sudo chown hawk_sftp:hawk_sftp /var/sftp/files
sudo vim /etc/ssh/sshd_config

Match User hawk_sftp
ForceCommand internal-sftp
PasswordAuthentication yes
ChrootDirectory /var/sftp
PermitTunnel no
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no

sudo systemctl restart sshd
sudo usermod -aG hawk_sftp hawk
sudo chmod g+w -R /var/sftp/files

Reboot

Samba Share
===========
hawk@hawk-pc:~$ sudo gpasswd --add hawk sambashare
Adding user hawk to group sambashare
hawk@hawk-pc:~$ sudo smbpasswd -a hawk
New SMB password:
Retype new SMB password:
Added user hawk.
hawk@hawk-pc:~$ sudo vim /etc/samba/smb.conf

[global]
usershare owner only = false
server signing = mandatory
smb encrypt = required
server min protocol = SMB3
client min protocol = SMB3


Append
------
[SambaShare]
    comment = Samba on Ubuntu
    path = /home/hawk/Public/SambaShare
    read only = no
    browsable = yes

Configure FTP Server
====================
sudo apt install vsftpd
sudo vim /etc/vsftpd.conf

Set the following options
-------------------------
anonymous_enable=NO
local_enable=YES
write_enable=YES
chroot_local_user=YES
user_sub_token=$USER
local_root=/home/$USER
allow_writeable_chroot=YES

sudo systemctl restart vsftpd
sudo systemctl enable vsftpd

Python based HTTP Server
========================
python3 -m http.server <port>
python3 -m http.server <port> --directory <path>

SSH in Nautilus
===============
Go to "Other Locations" > Enter "ssh://<remote username>@<remote IP address>/<absolute path to the directory>" > Connect.
Login.
Right Click > "Open in Remote Terminal".
Enter the credentials of the remote user in the remote file system and run the commands on remote file system.

Hibernation
===========
Create a swap partition during installation of ubuntu, which has a size more than the size of the RAM.
OR
If the swap partition was not created during installation of ubuntu, create one, which has a size more than the size of the RAM, using GParted Live USB. Then, "Mount at system startup" the swap partition, using "Disks" software in ubuntu, that is on the Hard Disk. Then reboot.

Run the below command and it should produce a similar output.
$ swapon --show
NAME      TYPE       SIZE USED PRIO
/dev/sda6 partition 16.6G   0B   -2

Get the UUID of swap partition from GParted
$ sudo vim /etc/default/grub
Edit the below line:
GRUB_CMDLINE_LINUX_DEFAULT="resume=UUID=<UUID of swap partition>"

$ sudo update-grub
$ reboot

xrdp
====
sudo apt install xrdp gnome-session
sudo adduser xrdp ssl-cert
echo "gnome-session" | tee ~/.xsession
echo "export XAUTHORITY=${HOME}/.Xauthority" | tee ~/.xsessionrc
echo "export GNOME_SHELL_SESSION_MODE=ubuntu" | tee -a ~/.xsessionrc
echo "export XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg" | tee -a ~/.xsessionrc
echo "export XDG_CURRENT_DESKTOP=ubuntu:GNOME" | tee -a ~/.xsessionrc
sudo systemctl restart xrdp
sudo pkill -u <username>

Misc
====
su -l root  //Login as root.
logout  //Logout from a user account.
cd -  //Go to previous directory.
cp -ir  //Asks for overwriting, and recursively.
mv -i  //No -r option is available. Just use "mv -i" for moving directories too.
sudo minicom -s  //For setting up.
